<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on KyrieZheng&#39;s Blog</title>
    <link>https://kyriezheng.github.io/posts/</link>
    <description>Recent content in Posts on KyrieZheng&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 30 Jun 2021 16:32:22 +0800</lastBuildDate><atom:link href="https://kyriezheng.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>网络通信</title>
      <link>https://kyriezheng.github.io/posts/tcp/</link>
      <pubDate>Wed, 30 Jun 2021 16:32:22 +0800</pubDate>
      
      <guid>https://kyriezheng.github.io/posts/tcp/</guid>
      <description>网络通信 七层网络模型  应用层  HTTP FTP SSH 等等   表示层 会话层 传输层  TCP UDP RTP   网络层  IP ICMP   数据链路层  以太网   物理层  TCP / UDP TCP建立连接三次握手
 第一次握手：建立连接。客户端发送连接请求报文段 SYN seq=x 客户端进入SYN_SEND状态 等待服务器的确认 第二次握手：服务器收到客户端的SYN请求报文段 确认请求 ACK=x+1 服务器将上述信息放入报文段发给客户端 服务器进入SYN_RECV状态 第三次握手：客户端收到服务器的SYN+ACK报文段 将ACK=y+1 像服务器发送报文段 客户端和服务端都进入ESTABLISHED状态  TCP断开连接四次分手
 第一次分手：主机1 发送FIN报文段seq=x+2 ACK=y+1 主机1进入FIN_WAIT_1 表明主机1没有数据要发送给主机2了 第二次分手：主机2收到主机1发送的FIN报文段，发送报文段ACK=x+3 主机1进入FIN_WAIT_2状态 表示主机2同意主机1的关闭请求 第三次分手：主机2向主机1发送FIN报文段seq=y+1 请求关闭连接，同时主机2进入LAST_ACK 第四次分手：主机1收到主机2发送的FIN报文段 向主机2发送ACK报文段ACK=y+2 主机1进入TIME_WAIT状态 主机2收到主机1的ACK报文段以后就关闭连接 此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了  UDP</description>
    </item>
    
    <item>
      <title>JavaScript 中的箭头函数</title>
      <link>https://kyriezheng.github.io/posts/js-arrow-fun/</link>
      <pubDate>Sun, 20 Jun 2021 23:37:46 +0800</pubDate>
      
      <guid>https://kyriezheng.github.io/posts/js-arrow-fun/</guid>
      <description>箭头函数1  this 是静态的 使用call 也无法改变  function getName() { console.log(this.name) } let getName2 = () =&amp;gt; { console.log(this.name) } window.name = &amp;#39;111&amp;#39; let school = { name: &amp;#39;222&amp;#39; } getName.call(school) // 222 getName2.call(school) // 111  不能当作构造函数  let Person = (name, age) =&amp;gt; { this.name = name; this.age = age } let xiaoming = new Person(&amp;#39;xiaoming&amp;#39;, 18) // 报错  不能使用arguments 变量  let fn = () =&amp;gt; { console.</description>
    </item>
    
  </channel>
</rss>
